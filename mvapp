#!/usr/bin/env python
# -*- coding: utf-8 -*-

import datetime
import getopt
import os
import plistlib
import subprocess
import sys
import zipfile


DEFAULT_APPS_PATH    = '~/Music/iTunes/iTunes Media/Mobile Applications'
DEFAULT_BACKUPS_PATH = '~/Library/Application Support/MobileSync/Backup'
DEFAULT_DEVICE_ID    = None
VERSION              = '1.0'


def main(argv=None):
  if not argv: argv = sys.argv[1:]
  try:
    long_opts = ['help',
                 'version',
                 'apps-path=',
                 'backups-path=',
                 'device-id='
                 'purchased',
                 'list-all']
    opts, args = getopt.getopt(argv, 'hva:b:d:pl', long_opts)
  except getopt.GetoptError as err:
    return exit(1, str(err) + '\n' + usage())
  
  apps_path    = DEFAULT_APPS_PATH
  backups_path = DEFAULT_BACKUPS_PATH
  device_id    = DEFAULT_DEVICE_ID
  sort_crit    = 'release_date'
  oldest       = True
  
  for o, a in opts:
    if (o in ['-h', '--help']):
      return exit(0, usage())
    elif (o in ['-v', '--version']):
      return exit(0, VERSION)
    elif (o in ['-a', '--apps-path']):
      apps_path = a
    elif (o in ['-b', '--backups-path']):
      backups_path = a
    elif (o in ['-d', '--device-id']):
      device_id = a
    elif (o in ['-p', '--purchased']):
      sort_crit = 'purchase_date'
    elif (o in ['-l', '--list-all']):
      oldest = False
    else:
      return exit(1, 'invalid argument: "%s".' % a)
  
  try:
    ipa_path  = os.path.expanduser(apps_path)
    ipa_files = filter(is_ipa, path_items(ipa_path))
    down_apps = map(aggregate, ipa_files)
    inst_apps = installed_apps(os.path.expanduser(backups_path), device_id)
    purc_apps = filter(lambda app: installed(app, inst_apps), down_apps)
    mvps      = sorted(purc_apps, key=lambda app: app.get(sort_crit))
    for mvp in mvps:
      print mvp.get('app_name'), mvp.get(sort_crit)
      if oldest: break
  except Exception as e:
    return exit(1, str(e))


def path_items(path):
  """Return items (directories, files, ...) in path."""
  return [os.path.join(path, f) for f in os.listdir(path)]


def is_ipa(filename):
  """Filter *.ipa files."""
  return os.path.isfile(filename) and '.ipa' == os.path.splitext(filename)[-1]
  

def aggregate(zipfilename):
  """Aggregate the release and purchase date for an ipa file."""
  metadata = read_plist(extract_plist(zipfilename))
  return {
      'filename': zipfilename,
      'app_name': bundle_id(metadata),
      'release_date': release_date(metadata),
      'purchase_date': purchase_date(metadata)
  }


def extract_plist(zipfilename):
  """Extract iTunesMetadata.plist file from ipa zip file."""
  try:
    zfile = zipfile.ZipFile(zipfilename)
    data  = zfile.read('iTunesMetadata.plist')
  finally:
    zfile.close()
  return data


def read_plist(plist):
  """Read binary/xml plist data/file."""
  if plist.find('\x00') < 0 and os.path.isfile(plist):
    try:
      file = open(plist)
      data = read_plist_string(file.read())
    finally:
      file.close()
    return data
  else:
    return read_plist_string(plist)


def read_plist_string(plist):
  """Read binary/xml plist data."""
  if plist.startswith('bplist'):
    proc = subprocess.Popen(['plutil', '-convert', 'xml1', '-o', '-', '-'], \
                            stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    proc.stdin.write(plist)
    return plistlib.readPlistFromString(proc.communicate()[0])
  else:
    return plistlib.readPlistFromString(plist)


def release_date(metadata):
  """Query for release date."""
  return metadata.get('releaseDate')


def purchase_date(metadata):
  """Query for purchase date."""
  if 'purchaseDate' in metadata:
    return metadata.get('purchaseDate')
  else:
    download_info = metadata.get('com.apple.iTunesStore.downloadInfo')
    purchase_date = download_info.get('purchaseDate')
    return datetime.datetime.strptime(purchase_date, '%Y-%m-%dT%H:%M:%SZ')


def bundle_id(metadata):
  """Query for software version bundle id."""
  return metadata.get('softwareVersionBundleId')


def installed_apps(backups_path, device):
  """Return a list of installed apps on a given device."""
  latest = latest_backup(backups_path, device)
  if not latest: raise AssertionException('No backup found')
  return latest.get('Applications')


def latest_backup(backups_path, device):
  """Return path to latest backup"""
  backup_paths     = filter(os.path.isdir, path_items(backups_path))
  manifests        = map(backup_manifest, backup_paths)
  device_manifests = filter(lambda manifest: is_device(device, manifest), manifests)
  useful_manifests = sorted(device_manifests, key=backup_date, reverse=True)
  return first(useful_manifests)


def backup_manifest(backup_path):
  """Read backup manifest."""
  return read_plist(os.path.join(backup_path, 'Manifest.plist'))


def backup_date(manifest):
  """Return backup creation date."""
  return manifest.get('Date') # or datetime.datetime.min?


def is_device(device, manifest):
  """Check if device has device name, UDID, or serial number."""
  if device == None:
    return True
  lockdown = manifest.get('Lockdown')
  return device in [lockdown.get('DeviceName'),
                    lockdown.get('UniqueDeviceID'),
                    lockdown.get('SerialNumber')]


def installed(metadata, installed_apps):
  """Predicate if app is installed."""
  return metadata.get('app_name') in installed_apps


def first(list):
  """Return first item in list or None."""
  if list:
    return list[0]
  else:
    return None


def usage():
  """Shows usage/help screen."""
  return '''Usage: %s [options...] <file>
Shows oldest purchased iOS app by release date.
Options:
 -a, --apps-path=<path>     Non-default path to downloaded apps by iTunes
 -b, --backups-path=<path>  Non-default path to device backups
 -d, --device-id=<device>   Device id (device name, UDID, or serial number)
 -p, --purchased            By purchase instead of release date (incl. updates)
 -v, --version              Show version info
 -h, --help                 Show usage screen''' % os.path.basename(sys.argv[0])


def exit(code, str):
  """Write error to stderr if exit code not 0 and exits with exit code."""
  if code:
    sys.stderr.write(str + '\n')
  else:
    print str
  return code


if __name__ == '__main__':
  sys.exit(main())
